SHELL:=/bin/bash

ifdef CONFIG_FILE
CONFIG_CMD:=$(shell cat $(CONFIG_FILE))
$(foreach ONE_CMD,$(CONFIG_CMD),$(eval $(ONE_CMD)))
endif

#--------------------------------------- HELP --------------------------------------------------------

define HELP_TEXT
Usage: make [preprocess | train | test | eval | clean]
	- preprocess: does the feature filtering and transforms the training and testing data 
		in the tab_space format into a format that can be consumed by the given ML method
	- train: creates a model from the training data
		* performs preprocess before 
	- test: label the testing data using a trained model
		* performs train before
	- eval: calculates the score on the testing data
		* performs test before

	Parameters:
		CONFIG_FILE : all parameters can be defined also in a config file;
			the value set as a command argument overrides the value set in the config file
		TRAIN_DATA : a path to the training data
		TEST_DATA : a path to the testing data
		RUN_DIR : a directory where all intermediate files are stored
		FEAT_LIST : comma-separated list of features to use in a model; all features used if empty (default)
		ML_METHOD : a ML method to be used (default = maxent)
		ML_PARAMS : additional ML parameters (default = )
		DATA_DIR : a directory with the data (default = $$RUN_DIR/data)
		MODEL_DIR : a directory with the model (default = $$RUN_DIR/model)
		RESULT_DIR : a directory with the result (default = $$RUN_DIR/result)
endef

export HELP_TEXT
help :
	@echo "$$HELP_TEXT"

#----------- data ----------------
#TRAIN_DATA
#TEST_DATA
#------------------------------------------- ML ---------------------------------------------------


ML_METHOD=maxent
#ML_METHOD=vw
#ML_METHOD=sklearn.decision_trees

ifeq ($(ML_METHOD),vw)
ML_PARAMS=--passes 20
endif

ML_PARAMS_HASH = $(shell echo "$(ML_PARAMS)" | shasum | cut -c 1-5)

#VW_APP=/net/work/people/mnovak/tools/x86_64/vowpal_wabbit/vowpalwabbit/vw
VW_APP=/net/cluster/TMP/mnovak/tools/vowpal_wabbit/vowpalwabbit/vw

#-------- directories --------------

SCRIPT_DIR=scripts

RUN_DIR=tte.run_dir

DATA_DIR=$(RUN_DIR)/data
MODEL_DIR=$(RUN_DIR)/model
RESULT_DIR=$(RUN_DIR)/result

#----------- files ---------------

file_stem = $(if $(filter .table, $(suffix $1)),$(basename $(notdir $1)),$(notdir $1))

TRAIN_DATA_STEM := $(call file_stem, $(TRAIN_DATA))
TEST_DATA_STEM := $(call file_stem, $(TEST_DATA))

MODEL_FILE = $(MODEL_DIR)/$(TRAIN_DATA_STEM).$(ML_METHOD).$(ML_PARAMS_HASH).model
RESULT_FILE = $(RESULT_DIR)/$(TRAIN_DATA_STEM).$(ML_METHOD).$(ML_PARAMS_HASH).$(TEST_DATA_STEM).res


#------------ create directories -----------

$(DATA_DIR) $(MODEL_DIR) $(RESULT_DIR) : | $(RUN_DIR)
	mkdir $@

$(RUN_DIR) :
	mkdir $@

#--------------------------------------- PREPROCESS -----------------------------------------------------------

TRAIN_DATA_READY = $(DATA_DIR)/$(TRAIN_DATA_STEM).$(ML_METHOD).table
TEST_DATA_READY = $(DATA_DIR)/$(TEST_DATA_STEM).$(ML_METHOD).table

preprocess : $(TRAIN_DATA_READY) $(TEST_DATA_READY)

#------------- symlink data files ----------

$(DATA_DIR)/$(TRAIN_DATA_STEM).table : $(TRAIN_DATA) | $(DATA_DIR)
	ln -s $< $@
$(DATA_DIR)/$(TEST_DATA_STEM).table : $(TEST_DATA) | $(DATA_DIR)
	ln -s $< $@

#------------- feature filtering -----------------

ifdef (FEAT_LIST)
FILT_FEAT_FLAG := --in $(FEAT_LIST)
endif

$(DATA_DIR)/%.filter_feats.table : $(DATA_DIR)/%.table
	zcat $< | $(SCRIPT_DIR)/filter_feat.pl $(FILT_FEAT_FLAG) | gzip -c > $@

#------------- ML formatting -----------------

#TODO: vw files must be indexed first => separate targets for train and test files

$(DATA_DIR)/%.$(ML_METHOD).table : $(DATA_DIR)/%.filter_feats.table
	case $(ML_METHOD) in \
		vw) zcat $< | scripts/vw_convert.pl | gzip -c > $@ \
			;; \
		vw.ranking) zcat $< | scripts/vw_convert.pl -m | gzip -c > $@ \
			;; \
		*) ln -s $< $@ \
			;; \
	esac

#----------------------------------------- TRAIN --------------------------------------------------------------

train : $(MODEL_FILE)

$(MODEL_DIR)/$(TRAIN_DATA_STEM).maxent.$(ML_PARAMS_HASH).model     : $(TRAIN_DATA_READY) | $(MODEL_DIR)
	zcat $< | $(SCRIPT_DIR)/maxent.train.pl $@
$(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.$(ML_PARAMS_HASH).model         : $(TRAIN_DATA_READY) | $(MODEL_DIR)
	$(VW_APP) -d $< -f $@ -b 20 --compressed \
		--oaa `zcat $< | cut -f 1 | sort -n | tail -n1` $(ML_PARAMS) \
		--holdout_off \
		-c -k --cache_file $(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.$(ML_PARAMS_HASH).$$$$.cache; \
	rm $(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.$(ML_PARAMS_HASH).$$$$.cache
$(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.ranking.$(ML_PARAMS_HASH).model : $(TRAIN_DATA_READY) | $(MODEL_DIR)
	$(VW_APP) -d $< -f $@ -b 20 --compressed \
		--csoaa_ldf $(ML_PARAMS) \
		--holdout_off \
		-c -k --cache_file $(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.ranking.$(ML_PARAMS_HASH).$$$$.cache; \
	rm $(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.ranking.$(ML_PARAMS_HASH).$$$$.cache
$(MODEL_DIR)/$(TRAIN_DATA_STEM).sklearn.%.$(ML_PARAMS_HASH).model : $(TRAIN_DATA_READY) | $(MODEL_DIR)
	zcat $< | $(SCRIPT_DIR)/sklearn.train.py $* "$(ML_PARAMS)" $@

clean_train:
	-rm $(MODEL_FILE)

#----------------------------------------- TEST --------------------------------------------------------------

RESULT_FILE = $(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).$(ML_METHOD).$(ML_PARAMS_HASH).res

test : $(RESULT_FILE)

$(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).maxent.$(ML_PARAMS_HASH).res     : $(MODEL_FILE) $(TEST_DATA_READY) | $(RESULT_DIR)
	zcat $(word 2,$^) | $(SCRIPT_DIR)/maxent.test.pl $< > $@
$(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).vw.$(ML_PARAMS_HASH).res         : $(MODEL_FILE) $(TEST_DATA_READY) | $(RESULT_DIR)
	zcat $(word 2,$^) | $(VW_APP) -t -i $< -p $@.$$$$ -b 20; \
	perl -pe '\''$$_ =~ s/^(.*?)\..*? (.*?)$$/$$2\t$$1/;'\'' < $@.$$$$ > $@; \
	rm $@.$$$$
$(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).vw.ranking.$(ML_PARAMS_HASH).res : $(MODEL_FILE) $(TEST_DATA_READY) | $(RESULT_DIR)
	zcat $(word 2,$^) | $(VW_APP) -t -i $< -p $@ -b 20
$(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).sklearn.%.$(ML_PARAMS_HASH).res  : $(MODEL_FILE) $(TEST_DATA_READY) | $(RESULT_DIR)
	zcat $(word 2,$^) | $(SCRIPT_DIR)/sklearn.test.py $< > $@

clean_test:
	-rm $(RESULT_FILE)

#----------------------------------------- EVAL --------------------------------------------------------------

ifeq ($(findstring ranking,$(RESULT_FILE)),ranking)
RANK_FLAG=--ranking
RANK_EVAL_FLAG=--acc --prf
endif

eval : $(RESULT_FILE)
	cat $< | scripts/results_to_triples.pl $(RANK_FLAG) | $(SCRIPT_DIR)/eval.pl $(RANK_EVAL_FLAG)

#---------------------------------------- CLEAN -------------------------------------------------------

clean : clean_test clean_train


