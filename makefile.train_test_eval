SHELL:=/bin/bash

include makefile.common

#--------------------------------------- HELP --------------------------------------------------------

define HELP_TEXT
Usage: make [train | test | eval | clean]
	- train: creates a model from the training data
		* performs preprocess before 
	- test: label the testing data using a trained model
		* performs train before
	- eval: calculates the score on the testing data
		* performs test before

	Parameters:
		CONFIG_FILE : all parameters can be defined also in a config file;
			the value set as a command argument overrides the value set in the config file
		TRAIN_DATA : a path to the training data
		TEST_DATA : a path to the testing data
		RUN_DIR : a directory where all intermediate files are stored
		ML_METHOD : a ML method to be used (default = maxent)
		ML_PARAMS : additional ML parameters (default = )
		MODEL_DIR : a directory with the model (default = $$RUN_DIR/model)
		RESULT_DIR : a directory with the result (default = $$RUN_DIR/result)
		INITIAL_MODEL : a model to start with and build upon; works only for VW models
endef

export HELP_TEXT
help :
	@echo "$$HELP_TEXT"

#----------- data ----------------
#TRAIN_DATA
#TEST_DATA
#------------------------------------------- ML ---------------------------------------------------

ML_METHOD=maxent
#ML_METHOD=vw
#ML_METHOD=sklearn.decision_trees

ifeq ($(ML_METHOD),vw)
ML_PARAMS=--passes 20
endif

ML_PARAMS_HASH = $(shell echo "$(ML_PARAMS)" | shasum | cut -c 1-5)

#VW_APP=/net/work/people/mnovak/tools/x86_64/vowpal_wabbit/vowpalwabbit/vw
VW_APP=/net/cluster/TMP/mnovak/tools/vowpal_wabbit/vowpalwabbit/vw

ifdef INITIAL_MODEL
INITIAL_MODEL_FLAGS=-i $(INITIAL_MODEL)
endif

#-------- directories --------------

SCRIPT_DIR=scripts

MODEL_DIR=$(RUN_DIR)/model
RESULT_DIR=$(RUN_DIR)/result

$(MODEL_DIR) $(RESULT_DIR) : | $(RUN_DIR)
	mkdir $@


#========== reading variables from a config file ================
# this must be placed after all definitions of public variables

include makefile.config

#----------- skuska --------------

skuska :
	@echo -e "[$$(date '+%F %T')]\tasd"
	@echo $(ML_METHOD)
	@echo $(ML_PARAMS)
	@echo $(RUN_DIR)
	@echo $(TEST_DATA)
	@echo $(TRAIN_DATA)
	@echo $(FEAT_LIST)
	@echo $(abspath $(TRAIN_DATA))

#----------- files ---------------

TRAIN_DATA_STEM := $(call data_stem, $(TRAIN_DATA))
TEST_DATA_STEM := $(call data_stem, $(TEST_DATA))

MODEL_FILE = $(MODEL_DIR)/$(TRAIN_DATA_STEM).$(ML_METHOD).$(ML_PARAMS_HASH).model
RESULT_FILE = $(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).$(ML_METHOD).$(ML_PARAMS_HASH).res

#----------------------------------------- TRAIN --------------------------------------------------------------

train : $(MODEL_FILE)

$(MODEL_DIR)/$(TRAIN_DATA_STEM).maxent.$(ML_PARAMS_HASH).model     : $(TRAIN_DATA) | $(MODEL_DIR)
	$(LOG_INFO) "Training a maxent model: $< => $@" >&2
	zcat $< | $(SCRIPT_DIR)/maxent.train.pl $@
$(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.$(ML_PARAMS_HASH).model         : $(TRAIN_DATA) | $(MODEL_DIR)
	$(LOG_INFO) "Training a VW-oaa model: $< => $@" >&2
	zcat $< | cut -f2 --complement | $(VW_APP) -f $@ $(INITIAL_MODEL_FLAGS) -b 20 \
		--oaa `zcat $< | cut -f 1 | sort -n | tail -n1` $(ML_PARAMS) \
		--holdout_off \
		-c -k --cache_file $(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.$(ML_PARAMS_HASH).$$$$.cache; \
	rm $(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.$(ML_PARAMS_HASH).$$$$.cache
$(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.ranking.$(ML_PARAMS_HASH).model : $(TRAIN_DATA) | $(MODEL_DIR)
	$(LOG_INFO) "Training a VW-csoaa_ldf (ranking) model: $< => $@" >&2
	zcat $< | cut -f2 --complement | $(VW_APP) -f $@ $(INITIAL_MODEL_FLAGS) -b 20 \
		--csoaa_ldf $(ML_PARAMS) \
		--holdout_off \
		-c -k --cache_file $(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.ranking.$(ML_PARAMS_HASH).$$$$.cache; \
	rm $(MODEL_DIR)/$(TRAIN_DATA_STEM).vw.ranking.$(ML_PARAMS_HASH).$$$$.cache
$(MODEL_DIR)/$(TRAIN_DATA_STEM).sklearn.%.$(ML_PARAMS_HASH).model : $(TRAIN_DATA) | $(MODEL_DIR)
	$(LOG_INFO) "Training a ScikitLearn ($*) model: $< => $@" >&2
	zcat $< | $(SCRIPT_DIR)/sklearn.train.py $* "$(ML_PARAMS)" $@

model_path:
	echo $(MODEL_FILE)

clean_train:
	-rm $(MODEL_FILE)

#----------------------------------------- TEST --------------------------------------------------------------

test : $(RESULT_FILE)

$(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).maxent.$(ML_PARAMS_HASH).res     : $(MODEL_FILE) $(TEST_DATA) | $(RESULT_DIR)
	$(LOG_INFO) "Predicting labels with a maxent model: $(word 2,$^) => $@" >&2
	zcat $(word 2,$^) | $(SCRIPT_DIR)/maxent.test.pl $< > $@
$(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).vw.$(ML_PARAMS_HASH).res         : $(MODEL_FILE) $(TEST_DATA) | $(RESULT_DIR)
	$(LOG_INFO) "Predicting labels with a VW-oaa model: $(word 2,$^) => $@" >&2
	zcat $(word 2,$^) | cut -f2 --complement | $(VW_APP) -t -i $< -p $@.$$$$ -b 20; \
	perl -pe '\''$$_ =~ s/^(.*?)\..*? (.*?)$$/$$2\t$$1/;'\'' < $@.$$$$ > $@; \
	rm $@.$$$$
$(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).vw.ranking.$(ML_PARAMS_HASH).res : $(MODEL_FILE) $(TEST_DATA) | $(RESULT_DIR)
	$(LOG_INFO) "Predicting labels with a VW-csoaa_ldf (ranking) model: $(word 2,$^) => $@" >&2
	zcat $(word 2,$^) | cut -f2 --complement | $(VW_APP) -t -i $< -p $@ -b 20
$(RESULT_DIR)/$(TEST_DATA_STEM).$(TRAIN_DATA_STEM).sklearn.%.$(ML_PARAMS_HASH).res  : $(MODEL_FILE) $(TEST_DATA) | $(RESULT_DIR)
	$(LOG_INFO) "Predicting labels with a ScikitLearn ($*): $(word 2,$^) => $@" >&2
	zcat $(word 2,$^) | $(SCRIPT_DIR)/sklearn.test.py $< > $@

clean_test:
	-rm $(RESULT_FILE)

result_path :
	echo $(RESULT_FILE)

#----------------------------------------- EVAL --------------------------------------------------------------

ifeq ($(findstring ranking,$(RESULT_FILE)),ranking)
RANK_FLAG=--ranking
RANK_EVAL_FLAG=--acc --prf
endif

eval : $(RESULT_FILE)
	$(LOG_INFO) "Evaluating the predicted labelling: $<" >&2
	cat $< | scripts/results_to_triples.pl $(RANK_FLAG) | $(SCRIPT_DIR)/eval.pl $(RANK_EVAL_FLAG)

#---------------------------------------- CLEAN -------------------------------------------------------

clean : clean_test clean_train


